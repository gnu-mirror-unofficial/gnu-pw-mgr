/*  -*- Mode: conf -*-
 */

AutoGen Definitions options;

prog-name       = sort-pw-cfg;
prog-title      = 'sort/merge password config file';
argument        = '[ <cfg-file> ...]';
long-opts;
version         = `tv=../.tarball-version
	test -f $tv && cat $tv || echo 0.0`;

// generated code attributes:
die-code;             // emit "die()" and "fserr()" functions
warn-code;            // emit "warning_msg()" function
usage-message;        // emit "usage_message()" function
no-xlate = anything;  // do not emit NLS stuff

config-header   = config.h;
help-value      = h;  // use '-h' not '-?'
more-help-value = M;  // use '-M' not '-!'

export[2] =<<-_EOF_
	#include "gpw-str.h"

        static unsigned int const secure_mask = S_IRWXG | S_IRWXO;
	extern char const * config_file_name;
	extern char const * leader_text;
	extern size_t       config_file_size;
	_EOF_;

include         = <<- _EOF_
	char const * config_file_name    = NULL;
	char const * leader_text         = NULL;
	size_t       config_file_size    = 0;
	extern sort_pw_cfg_exit_code_t emit_new_text(void);
	_EOF_;

flag            = {
    name        = output;
    value       = o;
    arg-type    = file;
    descrip     = 'send result to this file';
    doc = <<- _EOF_
	Normally, the first named file is rewritten with the entries
	ordered by the hash code with duplicates removed.  Use this
	option to redirect output to the named file.
	_EOF_;
};

flag            = {
    name        = default;
    value       = d;
    descrip     = 'select default config file for first input file';
    doc = <<- _EOF_
	Instead of starting with the first operand (or first file in
	the standard input file list), start processing password id's
	with the contents of the standard configuration file.
	The additional files will override or augment this file.
	_EOF_; // '
};

main = {
    main-type       = for-each;
    handler-proc    = load_domain_attrs;
    handler-type    = some-text-of-file;
    handler-frees;
    main-fini       = '    res |= emit_new_text();';
    main-init = <<- _EOF_
	\    if (HAVE_OPT(DEFAULT)) {
	\        char * fname = find_cfg_name();
	\        res |= validate_fname(fname);
	\        free(fname);
	\    }

	_EOF_;
};

#shell
if test ${#top_srcdir} -gt 0
then srcdir=${top_srcdir}/src
else srcdir=.
fi
grep '^exit-' ${srcdir}/opts.def
#endshell

detail = <<-  _EOF_

	This program will sort (and merge) the per-domain password attributes.
	If there are duplicate entries, the last entry seen will survive.  The
	result will be sorted by password id hash code and option name.  Thus,
	any file containing more recent entries should appear last.  If you have
	updated two different password ids in two different password
	configuration files without having merged them, you may have a merge
	problem. You will need to try to remember what you did.

	The "header" portion of the config file (the seeds and the
	<program...> marker) are taken from the first config file listed
	and ignored in the remaining files.
	_EOF_;

detail = 'Example usage can be seen in the example section below.';

doc-section = {
    ds-format = texi;
    ds-type   = authors;
    ds-text   = "Written by Bruce Korb.";
};

/*  -*- Mode: conf -*-
 */

AutoGen Definitions options;

prog-name       = gnu-pw-mgr;
prog-title      = 'derive a password from an id';
argument        = '[ <pw-id> ]';
long-opts;
version         = `tv=../.tarball-version
	test -f $tv && cat $tv || echo 0.0`;

/*
 *  This file is part of gnu-pw-mgr.
 *  Copyright (C) 2013-2018 Bruce Korb, all rights reserved.
 *  This is free software. It is licensed for use, modification and
 *  redistribution under the terms of the GNU General Public License,
 *  version 3 or later <http://gnu.org/licenses/gpl.html>
 *
 *  gnu-pw-mgr is free software: you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as published by the
 *  Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  gnu-pw-mgr is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *  See the GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * --copyright-mark "(copyright \\(c\\)[ \t]+|" \
 *   "date[ \t]*=[ \t]*\")([12][90][0-9][0-9])"
 */

copyright = {
    date  = "2013-2018";
    owner = "Bruce Korb";
    eaddr = 'bkorb@gnu.org';
    type  = gpl;
};

// generated code attributes:
die-code;             // emit "die()" and "fserr()" functions
warn-code;            // emit "warning_msg()" function
usage-message;        // emit "usage_message()" function
no-xlate = anything;  // do not emit NLS stuff
config-header         = config.h;

// standard option tweaks:
homerc;               // enable config files, but no file is specified
help-value      = h;  // use '-h' not '-?'
more-help-value = M;  // use '-M' not '-!'
load-opts-value;      // no flag character for this option
disable-save;         // disable option state saving

/*
 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 #
 #  O P T I O N   D E F I N I T I O N S
 #
 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 */
flag = { name = seed-options;
    descrip =
	'Options for adding and removing seeds in the configuration file.';

    documentation = <<- _EODoc_
	The @code{--text} option or the @code{--tag} option (when by itself)
	tell the program to manage password "seeds" in its database
	(configuration file).  Both options together add a new seed, and
	@code{--tag}, by itself on the command line, removes a seed.
	_EODoc_;
};

flag            = {
    name        = seed;
    arg-type    = hierarchy;
    arg-name    = SEED;
    descrip     = 'define a seed for a series of passwords';
    no-command;

    doc = <<- _EOF_
	This option is @strong{not} a command line option.  It is also
	the only option that is directly processed from the config file.

	The seed values consist of four named parts (sub-options):
	@table @samp
	@item tag
	These are displayed next to each displayed password to help identify
	them.
	@item text
	This is not displayed, but is used for the SHA initial value.
	This may be arbitrarily long.
	@item ver
	The version of @code{gnu-pw-mgr} used to initially store the seed.
	This is used to determine the password tweaking algorithm to use
	when the generated password does not meet the site criteria
	(@pxref{gnu-pw-mgr password-options,,
	the password character class option}).  On rare occasions, new
	character class restrictions may cause a change in the algorithm
	used to tweak passwords.  When this is done, the old algorithm
	is still used to tweak passwords from the older seeds.
	@item shared
	The presence of this sub-option specifies that the seed is only to be
	used with password ids that are also marked as @code{--shared}.
	Without this sub-option, the seed is only used with password ids that
	are @emph{not} marked as @code{--shared}.
	@end table

	The way to change a password is to specify the @code{rehash} count.
        It defaults to 10007. You can determine the current value with the
        @code{--status} option.

	Specify only the @code{--tag} and @code{--text} (and maybe
	@code{--shared}) command line options and the program will initialize or
	insert a new value into the configuration file.  Specify only the tag
	and no other command line arguments, and the associated seed entry will
	be removed.  All passwords using that seed will become unavailable.
        You cannot remove the last seed.
	_EOF_;
};

flag            = {
    name        = tag;
    value       = t;
    arg-type    = string;
    arg-name    = TAG;
    descrip     = 'seed tag';
    flags-cant  = login-id, length, cclass, rehash, specials, no-header,
                  select-chars, confirm, status, delete;
    no-preset;
    settable;

    doc = <<- _EOF_
	The tag for a seed to be added to or removed from the config file.
	The use depends on whether or not there is a @code{--text} option.
	_EOF_;
};

flag            = {
    name        = text;
    value       = s;
    arg-type    = string;
    arg-name    = TEXT;
    descrip     = 'seed text';
    flags-must  = tag;
    no-preset;
    flag-code   = <<- _EOCode_
	\    char const * oops =
	\        strstr(pOptDesc->optArg.argString, end_text_mark);
	\    if (oops == NULL) return;
	\    die(GNU_PW_MGR_EXIT_BAD_SEED, text_has_mark_fmt,
	\        pOptDesc->optArg.argString);
	_EOCode_;

    doc = <<- _EOF_
	The text for a password seed to be added to the config file.
	This text cannot include the 7 character sequence "</text>".
        There must always be at least one. Multiple text seeds will
        cause multiple passwords to be printed out.

	This text must be at least 64 characters long.  The expectation
	is you will write a sentence or two that you can easily remember,
	including any capitalization, punctuation and spacing.  You should
	include some non-alphabetic, non-digit characters here and there to
	make a dictionary attack more difficult.  But if you need to
	reconstruct this, you need to remember them.

	If the text is shorter than 64 characters, it will be padded out.  In
	such a case, you will need to save the configuration file some place
	secure or it will be extremely difficult to reconstruct it, should
	that become necessary.

        The original expectation was that passwords would be updated on an
        occasional basis. Now that I have over 100 login credentials, it is
        clearly infeasible to go around and update them all. Instead, I have
        to decide which are important to update and use the @code{--rehash}
        option to change the rehash count. The date of the last rehash
	count change is recorded with the password id options.
	_EOF_;
};

flag            = {
    name        = shared;
    disable     = no;
    descrip     = 'shared tag';
    no-preset;

    doc = <<- _EOF_
	If this option is used on conjunction with the @code{text} option,
	that seed is marked as a shared password seed and derived passwords
	are only printed for password ids that have been marked as shared.
	When used in conjunction with a password id,
	then the password id will be marked as a shared.
	Passwords will only be printed for seeds and ids that have matching
	``shared'' settings.
	_EOF_;
};

flag            = {
    name        = default-cclass;
    disable     = no;
    descrip     = 'set default character classes';

    arg-type    = string;
    arg-name    = cclass;
    no-preset;

    doc = <<- _EOF_
	When present on the command line by itself, the value is stashed
	in the configuration file and used in future invocations of
	``gnu-pw-mgr''.

	The GNU password manager defaults to requiring one alphabetic
	character (upper or lower case) and one digit. Most passwords
	are required to have something more complicated. Once this
	option has been provided, the new default will be
	applied whenever a new password identifier is detected. This
	detection is based on not finding any attributes stored
	in the configuration file. This means that if you rely on all
	defaults for some login (you never provided any "password
	options" for the id), the generated password *might* change.

	You cannot adjust previous values. The classes you select will
	become the default character classes from then on. Previous
	password ids will continue using the value assigned when the
	password was first created.
	_EOF_;
};

/*
 # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * New password option checklist:
 *
 * 1. fill in and document the option here
 * 2. Add a new pwid_*_fmt string for adding it to the config file
 * 3. deal with it in removed_old_opts, update_pwid_opts and next_pwid_opt
 *    in pw-opts.c.  "bootstrap.conf" will verify it.
 * 4. write the code to actually do something about this option.
 */

flag = { name = password-options;
    descrip = 'Options for specifying password attributes.';

    documentation = <<- _EODoc_
	The @code{--cclass}, @code{--length}, @code{--tag}, @code{--shared}
	and @code{--specials} options are stored in the configuration file.
	They are associated with a password ID via a clipped sha check sum
	of the id.  They will be recalled the next time that id is used.
	_EODoc_;
};

flag            = {
    name        = login-id;
    value       = i;
    arg-type    = string;
    descrip     = 'a reminder of your login id';
    settable;
    no-preset;

    doc = <<- _EOF_
	It is sometimes difficult to remember your login name for a
	given site.  Or even, perhaps, if you have ever set up an account
	on a particular site.  By specifying this option, you will know
	both that you have set it up and you will have a reminder what
	your login name is.  Avoid using your real login name.

	Also, there are now some sites that send password credentials to a
        validation domain that is common among several domains. Since this
        application forces you to use different passwords for different domains
        and these domains force you to use the same password for different
        domains, this option solves the irresistable force and immovable
        object dilemma. For each of the dependent domains, specify this option
        that will remind you of the correct password id.

	The @code{login-id} has no effect on the final password, so it
	may be specified or altered at any time.
	_EOF_;
};

flag            = {
    name        = length;
    value       = l;
    arg-type    = number;
    arg-range   = '4->128';
    arg-default = 16;
    descrip     = 'sets password length';
    settable;
    no-preset;

    doc = <<- _EOF_
	Some web sites are more restrictive.  Some are more generous.
	Use of this option requires a @code{<pw-id>} operand.

	Password lengths of 4 through 7 characters are limited to "pin" numbers.
	"pin" numbers are 4 or more digits.  All other passwords must be at
	least 8 characters long.  The default length is 16.  Use at least 24,
	if you can.
	_EOF_;
};

flag = {
    name        = cclass;
    descrip     = 'password character class';
    value       = c;
    settable;
    no-preset;

    arg-type    = set-member;
    keyword     = alpha, upper, lower, digit, special, // requirements
		  no-special, no-alpha, no-triplets,   // prohibitions
		  no-sequence,                         // prohibition
		  pin, alnum,                          // abbreviations
		  two-upper, two-lower, two-digit,     // two of
		  two-special;                         //   requirements
    arg-default = alpha, digit;

    /*
     * Take note of a '+' or '-' prefix. If it is there, the specified
     * character classes will be added or removed from the current set.
     * If the result is invalid, it will then be set to the current default.
     */
    flag-code[0] = <<- _EOCode_
	    /*
	     * The lead character is only examined from the command line
	     */
	    if (  (STATE_OPT(CCLASS) == OPTST_DEFINED)
	       && (pOptDesc->optArg.argString != NULL)) {
	        char * p = (char *)(uintptr_t)pOptDesc->optArg.argString;
	        switch (pOptDesc->optArg.argString[0]) {
	            case '-': tweak_prev_cclass = -1; *p = '='; break;
	            case '+': tweak_prev_cclass =  1; *p = '='; break;
	            default:  break;
	        } // force the results to be only the specified bits
	    }
	_EOCode_;

    flag-code[1] = <<- _EOCode_
	    if (pOptions == &gnu_pw_mgrOptions)
	        fix_cclass_bits(pOptDesc);
	_EOCode_;

    doc = <<- _EOF_
	This option augments or specifies which character classes either
	must or must not appear in the final password.

	Some sites disallow special characters, other sites require
	them, and still others require them, but only certain ones.
	If disallowed, specify @code{no-special} and special
	characters will be replaced with digits.  If @code{special} is
	specified specifically, then in the absence of a '+' or '/'
	character (or their alternates), one character will be
	replaced with a hyphen.  Other characters may be substituted
	for these three special characters with the @code{--specials} option.

	@noindent
	Explanations of the keywords:
	@table @samp
	@item upper
	There must be at least one upper case letter.

	@item lower
	There must be at least one lower case letter.
	Both this and @samp{upper} together require one of each.

	@item alpha
	There must be at least one alphabetic character, either upper or lower
	If either @samp{upper} or @samp{lower} is specified, this attribute
	is a no-op.

	@item no-alpha
	Alphabetic characters are prohibited.  This conflicts with
	@samp{upper}, @samp{lower} and @samp{alpha}.

	@item digit
	There must be at least one decimal digit character.

	@item no-triplets
	When three characters in a row are the same, the third is fiddled.
	Letters are changed to the next letter and @code{z} becomes @code{a}.
	Digits are handled similarly.  Special characters are replaced with
	the third possible special character (@code{-}, unless modified with
	@code{--specials}).  (Yes, there are a few such sites.)

	@item special
	The password must contain at least one @samp{special character}
	(a non-alphabetic, non-digit character).

	@item no-special
	The password must not contain any characters that are not alphabetic
	or decimal digits.

	@item no-sequence The password must not contain a consecutive sequence
	of three or more characters.

	@item pin
	The password is all digits, a Personal Identification Number.
	This is an abbreviation for @code{no-alpha + no-special + digit}.

	@item alnum
	This is an abbreviation for @code{alpha + digit}.

	@item two-*
	Two of a particular character class are required.
	Specifying this implies "at least one of" the specified type.
	Two upper case, lower case, punctuation (special) and digit
	characters may be specified this way.  ``two-alpha'' is not supported.
	@end table
	_EOF_;
};

flag            = {
    name        = rehash;
    value       = r;
    arg-type    = number;
    // IF you change the maximum limit here, be sure to change MAX_REHASH_CT
    //
    arg-range   = '1->100000';
    descrip     = 'Change the password rehash count';
    no-preset;

    flag-code[0] = <<- _EOCode_
	\    /*
	\     * this option can only appear on the command line.
	\     */
	\    if (pOptDesc->optArg.argString != NULL)
	\        switch (pOptDesc->optArg.argString[0]) {
	\        case '-':
	\            tweak_prev_rehash = -1;
	\            pOptDesc->optArg.argString++;
	\            break;
	\        case '+':
	\            tweak_prev_rehash =  1;
	\            pOptDesc->optArg.argString++;
	\            break;
	\        default:
	\            break;
	\        }
	_EOCode_;

    doc = <<- _EOF_

	Passwords are created with the SHA256 hash of the "seed
        string", the password id, and the tag text associated with the
        seed. The result is then "rehashed" with the pbkdf2 function.
        By default, this is done 10007 times.  This can be changed by
        specifying a different count between 1 and 100,000.  You can
        change this either directly with a count or by prefixing a
        number with a '+' or '-' character. The prefix will cause the
        previous value to be adjusted.  Changing the count will change
        the password and will mark the entry with the date of the most
        recent password change.

	Please see RFC 2898 for a specification of the PBKDF2
	(Password-Based Key Derivation Function version 2) function.
	_EOF_;
};

/*
 * DO NOT REMOVE THIS OPTION
 *
 * It is used internally for the rehash count.
 */
flag            = {
    name        = pbkdf2;
    disable     = no;
    enable      = use;
    enabled;
    arg-type    = number;
    arg-default = 10007;
    descrip     = 'rehash password with PKCS#5 PBKDF2';
    settable;
    no-preset;
    no-command;

    doc = <<- _EOF_
	This option is for internal use only. The rehash count is stored
	in the configuration file as a "pbkdf2" value.
	_EOF_;
};

flag            = {
    name        = specials;
    arg-type    = string;
    descrip     = 'set alternate special characters';
    arg-default = '/+-';
    settable;
    no-preset;
    flag-code   = <<- _EOCode_
	\    unsigned int len = strlen(pOptDesc->optArg.argString);
	\    if (len != 3)
	\        usage_message("the --specials option must have exactly 3 "
	\                      "characters, not %u.\n", len);
	_EOCode_;

    doc = <<- _EOF_
	The computed password is a base64 encoding of a sha256 hash of
	various inputs.  Base64 encoding uses '+' and '/'
	characters. However, when this program is required to have at
	least one special character in the result, and neither the '+'
	nor '-' get encoded, one character will be replaced with a
	hyphen (@code{-}).

	Some web sites require particular special characters in their
	passwords that do not include these three default characters.
	For those passwords, specify this option with exactly three
	characters in the string argument.  They will be used to
	replace the three characters above.  The first two may be the
	same, but the third @i{must} be different from the first two.
	This option is accepted, but serves no purpose if
	@code{no-special} has been specified in the @code{--cclass}
	option.
	_EOF_;
};

/*
 # * * * * * * * * * * * * * * * * * * * *
 */

flag = { documentation; name = formatting-options;
    descrip = 'Options for management and output format.';
};

flag            = {
    name        = no-header;
    value       = H;
    no-preset;
    descrip     = 'omit printing the password headers';
    doc = <<- _EOF_
	By default, the output includes column headers.
	For confirmation output, the two values will have column labels,
	and for password output, it will contain any login hint and the
	date the last time the @code{--rehash} count was changed.
	(Password was changed.)

	Suppressing it is intended for automated logins.
	The login name hint will not be provided, but the
	@code{tag} is printed.
	_EOF_;
};

flag            = {
    name        = select-chars;
    arg-type    = string;
    no-preset;
    descrip     = 'select only certain bytes of a password';

    doc = <<- _EOF_
	There exists at least one web site that asks you to enter just some
	of the password characters, like the second, tenth and sixteenth.
	With long, memorable resistant passwords, this can be difficult to
	do.  For such web sites, provide this option with the string
	"2,10,16" as the option argument.  The characters to select are
	space or comma separated values.  The result cannot be longer than
	the original password.
	_EOF_;
};

flag            = {
    name        = confirm;
    value       = C;
    arg-type    = string;
    no-preset;
    settable;
    descrip     = 'confirmation question answers (see man page)';

    doc = <<- _EOF_
	Some web sites use "confirmation questions" that, supposedly, only
	you know the answer to.  Unfortunately, these are often times
	questions that can be researched by others or they can be questions
	that you have forgotten the answers to or may have multiple answers
	for.  The net result is that you are locked out.  This option makes
	it easy to get consistent answers to these questions and have these
	answers be different for every web site, just like your password.

	Providing this option will cause the argument to be merged into the
	hash source (changing the resulting password).  Exactly 12 letters
	will be extracted from the hash and converted to lower case.  The
	string argument to this option should be the last word or two from
	the question, yielding an easy-to-remember way of obtaining a
	consistent answer to these inscrutable questions.

	You will need to update your confirmation question answers when
	you update your password seed. However, since that can be highly
        inconvenient also, this option will print *TWO* results. The first
        will be dependent on the current password hash, the second will
        depend *only* on the confirmation question and password id.
        Consequently, the second one will be stable going forward.
        The first answer is now deprecated.
	_EOF_;
};

flag            = {
    name        = old-confirm;
    arg-type    = string;
    deprecated;
    no-preset;
    descrip     = 'out-of-date confirmation question answers';
    flag-code   = <<- _EOCode_
	\    SET_OPT_CONFIRM(pOptDesc->optArg.argString);
	_EOCode_;

    doc = <<- _EOF_
	Use this method of answering confirmation questions only if you have to.
	When your password changes, this will change, too. Inconvenient.
	_EOF_;
};

flag            = {
    name        = status;
    value       = S;
    no-preset;
    descrip     = 'Show status of a password id';
    doc = <<- _EOF_
	Show all the modified password attributes for a password id.
	If there are no special attributes, the word "default" is printed.
	No password id is invalid, but some may have all default values,
	consequently there is no special information kept about it.

	Command line options will affect the output, but will not be
	stored for future use.
	_EOF_;
};

flag            = {
    name        = delete;
    value       = d;
    no-preset;
    descrip     = 'Remove a password id entry';
    doc = <<- _EOF_
	This will print out the attributes associated with a particular
	password id and remove them from the configuration file.
	_EOF_;
};

flag            = {
    name        = domain;
    arg-type    = string;
    arg-name    = DOMAIN;
    max         = NOLIMIT;
    descrip     = 'a reminder of domains used for password id';
    no-preset;
    stack-arg;

    doc = <<- _EOF_
	If you create a lot of passwords, it is easy to forget which
	domains have an associated password.  You do @emph{not} want
	to specify a password id, merely note the domains for which you
	have a password id.  With well over 100 passwords, I found I
	need to be able to know which need to be updated occasionally.
	This option will cause a separate text database to be updated
	with a domain name and an update date.  With a single hyphen
	as the option argument, that database will be printed out in
	chronological order.
	_EOF_;
};

flag            = {
    name        = config-file;
    arg-type    = string;
    arg-name    = CONFIG-FILE;
    no-preset;
    immediate;
    descrip     = 'specify configuration file';
    flag-code   =  <<-  _EOF_
	\    optionLoadOpt(pOptions, pOptDesc);
	\    pOptDesc = pOptions->pOptDesc + INDEX_OPT_LOAD_OPTS;
	\    pOptDesc->fOptState |= OPTST_DISABLED;
	\    (pOptDesc->optOccCt)++;
	_EOF_;

    doc = <<- _EOF_
	If you need an alternate location for storing your password
	seed files, use this option. It must be specified on the
        command line every time it is needed. You are responsible to
        ensure that the directory already exists. The file will be
        left read-only when gnu-pw-mgr exits. The containing directory
	permissions will not be checked or altered.
	_EOF_;
};

/*
 # * * * * * * * * * * * * * * * * * * * *
 */

flag = { documentation; name = usage-options;
    descrip = 'Options supported by the AutoOpts option library.';
};

/*
 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 #
 #  D O C U M E N T A T I O N   A T T R I B U T E S
 #
 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 */
exit-name[1]  = invalid;
exit-desc[1]  = 'the option/argument configuration is invalid';

exit-name[2]  = no-mem;
exit-desc[2]  = 'insufficient memory';

exit-name[3]  = bad-user;
exit-desc[3]  = 'no password entry for current user';

exit-name[4]  = homeless;
exit-desc[4]  = 'home directory could not be found';

exit-name[5]  = perm;
exit-desc[5]  = 'config file improperly protected';

exit-name[6]  = no-config;
exit-desc[6]  = 'config file missing';

exit-name[7]  = bad-config;
exit-desc[7]  = 'cannot update config file';

exit-name[8]  = no-seed;
exit-desc[8]  = 'no seeds were specified in the config file';

exit-name[9]  = bad-seed;
exit-desc[9]  = 'The seed value was invalid';

exit-name[10] = bad-select-chars;
exit-desc[10] = 'the list of characters for the --select-chars option is bad';

exit-name[11] = no-pwid;
exit-desc[11] = 'no password id was specified';

exit-name[16] = coding-error;
exit-desc[16] = 'There is a coding error that should be reported';

detail = <<-  _EOF_

	The password id should contain a fairly consistent permutation of the
	URL you are logging in to.  "Fairly" because you may wish to vary your
	financial institutions differently than your newspaper, or you may
	need multiple credentials for the same domain.  Either way, a
	password id is formed by surrounding the domain name with unlikely
	prefixes, suffixes and punctuations.

	Only the passwords for one password id are ever printed.  If the
	command line contains multiple operands (arguments after the options),
	then they are assembled into one password id with space characters
	separating the original operands. One password is printed for each
        seed stored in the password configuration file.

	One password is printed for every configured seed value with a
	matching @code{--shared} option state.  Seed values are added by
	specifying just the @code{--tag} and @code{--text} options, with or
	without the @code{--shared} option.  When passwords are printed,
	the tag is also printed in plain text.

	Passwords are changed by specifying the @code{-r} or @code{--rehash}
        option with a new numeric value. The day this happens will be noted
        in the password configuration file and printed in the password header.

	Password ids are never stored anywhere.

	Please be sure to read the "Warnings" section in the full documentation.

	NOTE: the @code{--load-opts} option is supported by the option
        processing library. This program actually prohibits its usage. The
        password configuration database is normally found in a standard
        location. It may be overridden at invocation time by the
        @code{--config-file} option. Using @code{--load-opts} on the command
        line will lead to a conflict error.
	_EOF_;

detail = 'Example usage can be seen in the example section below.';

doc-section = {
    ds-format = texi;
    ds-type   = examples;
    ds-text   = <<- _EndOfText_
	Before running the program to print a password, you must first
	initialize its database with at least one seed.

	@example
	gnu-pw-mgr --tag "first-seed-tag" --text \
	"This is only a 'test'.  Were it *real*,
	you _would_ likely know?"
	@end example

	These two strings along with a password id are used to create a
	@samp{sha256} hash code password.  So, now you are able to print a
	password.

	@example
	gnu-pw-mgr --login-id "user-name" --length 32 \\
	    --cclass=upper,lower,digit,special \\
	    my example.com
	@end example

	In this example, the password id is the string "my example.com".
	The space character is inserted between the command line operands.
	The options are associated with this id via another @samp{sha256}
	sum of just the id.  The "user-name" would typically be either your
	actual user name for the site, or something that could readily
	remind you of the login id.  If omitted, just do not forget it.
	The length specifies the maximum length allowed for a password on the
	site.  You will get a password of that length.  The @code{--cclass}
	defines the allowed and/or required character class(es) for the
	passwords for the site.

	With the above seed and invocation, you will see printed out exactly
	this:

	@example
	seed-tag     login id hint: user-name   pw:
	first-seed-tag iQiF1g5aLQ0JqFIUbR/svpTS+F/PCeoy
	@end example

	Henceforth typing just @samp{gnu-pw-mgr my example.com} will always
	yield this output.  The options above are now associated with the
	password id via a hash code.  The @code{gnu-pw-mgr} database (either
	@file{~/.local/gnupwmgr.cfg} or @file{~/.gnupwmgrrc}, but the former
	preferred) will now be this (hash code abbreviated):

	@example
	<seed>
	  <tag>first-seed-tag</tag>
	  <text>This is only a 'test'.  Were it *real*,
	you _would_ likely know?</text>
	</seed>
	<program per_pw_id>
	<pwtag id="*HASH*">
	  cclass = =alpha + upper + lower + digit + special
	</pwtag>
	<pwtag id="*HASH*">length = 32</pwtag>
	<pwtag id="*HASH*">login-id = 'user-name'</pwtag>
	@end example
	_EndOfText_;
};

doc-section = {
    ds-format = texi;
    ds-type   = authors;
    ds-text   = "Written by Bruce Korb.";
};

doc-section = {
    ds-format = texi;
    ds-type   = notes;
    ds-text   = <<- _EndOfText_
	This program specifies its own configuration file and disallows the
	use of any other.  This file should be modified by running this
	program and not by editing it.  The @code{--seed} and
	@code{--load-opts} options cannot be specified on the command line and
	the @code{--seed} option is only recognized in a configuration file.

	Password ids should have some always-used prefix and/or suffix glued
	onto a domain name or some trivial permutation of the domain name.
	If you forget your password id, then the associated password is
	irretrievably lost.  The prefix and suffix should be easily
	remembered.  If you do not add a prefix or suffix and the
	configuration file becomes compromised, then you have lost the keys to
	all your passwords because it becomes trivial to guess password ids.

	For example, always prepending @samp{_mine_} to a domain would yield
	@samp{_mine_example.com} for your password id at @samp{example.com}.
	Password ids are not stored anywhere.
	_EndOfText_;
};

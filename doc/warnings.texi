
@node warning warning
@chapter Getting Started and Warnings
@ignore

This file is part of gnu-pw-mgr.
Copyright (C) 2013-2018 Bruce Korb, all rights reserved.
This is free software. It is licensed for use, modification and
redistribution under the terms of the GNU General Public License,
version 3 or later <http://gnu.org/licenses/gpl.html>

gnu-pw-mgr is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

gnu-pw-mgr is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program.  If not, see <http://www.gnu.org/licenses/>.

@end ignore
Things to consider.

@menu
* getting started::     Getting Started Quickly
* deficiencies::        Cleanups that need doing
* prying eyes::         Shell history
* best pratcices::      Best gnu-pw-mgr practices
* password resets::     Password reset arrangements
@end menu

@node getting started
@section Getting Started Quickly

To use the program you must first initialize a configuration file with a "salt".
At the moment, it is a command line only, meaning you need to start a
"terminal" session. The backslash continues the command line and the
quoted string continues it:

@example
$ gnu-pw-mgr -t new-pw -s \
"Peter Piper picked a peck of pickled peppers.
If Peter Piper picked a peck of pickled peppers,
how many peppers did Peter Piper pick?"
$ cat $HOME/.local/example.cfg

<seed>
 <tag>new-pw</tag><ver type=integer>2104320</ver>
 <text>Peter Piper picked a peck of pickled peppers.
If Peter Piper picked a peck of pickled peppers,
how many peppers did Peter Piper pick?</text>
</seed>
@end example

Now you can create passwords.

@example
$ gnu-pw-mgr /nytimes.com/

seed-tag     password:   (pw undated)
new-pw       aEv2Gt48FJalbNo4
@end example

By default, passwords have at least one alphabetic character and one digit.
It may or may not have a special character and there's no prohibition on
triple characters or three in a sequence. You can change the default:

@example
$ gnu-pw-mgr --default='=upper,lower,digit,spec,no-trip'
$ gnu-pw-mgr /nytimes.com/                     

seed-tag     password:   (pw undated)
new-pw       aEv2Gt48FJalbNo/
@end example

and now the last character of the password is changed to a '/'.
This will cause an entry to be stored for this password, so the config file will now
contain:

@example
<default_cclass>=upper,lower,digit,spec,no-trip</default_cclass>
<seed>
 <tag>new-pw</tag><ver type=integer>2104320</ver>
 <text>Peter Piper picked a peck of pickled peppers.
If Peter Piper picked a peck of pickled peppers,
how many peppers did Peter Piper pick?</text>
</seed>
<program per_pw_id>
<pwtag id="Ps3lXdDHu2ZvJS16fSpjv4iF">cclass    = =upper + lower + digit + special
+ no-triplets</pwtag>
<pwtag id="Ps3lXdDHu2ZvJS16fSpjv4iF" date="18533">use-pbkdf2 = 10007</pwtag>
@end example

The "@samp{/nytimes.com/}" string hashes to the "@samp{Ps3l...F}"
string. But, obviously, there is no way to derive the
"@samp{/nytimes.com/}" string from that partial hash.  However, the
next time you need the password, the "@samp{Ps3l...F}" will be re-created to
find the password attributes, such as length, rehash count ("pbkdf2"),
and any alternate special characters. See @pxref{gnu-pw-mgr
password-options}.  for all the ways passwords can be adjusted
(consistently) to pass muster with login restrictions.

Also (hint): the "login-id" option is useful to remind you of either
of two things: an alternate domain name for web sites that use
multiple domains with a unified login.  It can be used to remind you
of the login name you need for the particular site (e.g. which email
address or which user name you've chosen).

@node deficiencies
@section Cleanups that need doing

It is entirely possible that there are some web sites out there with
password requirements that this program cannot (at present) necessarily
comply with.  There are some possible workarounds:

@enumerate
@item
Request the addition of a new character classification flag.  If the issue
can be satisfied by fiddling the emitted password a little bit (with the
@code{--rehash} option), that would be faster and easier than implementing
a new option.

@item
Likely, something else, surely.
Please send a bug report (preferably a patch :) so the issue can be fixed.
@end enumerate

@node prying eyes
@section Shell history

It is imprudent to leave your invocations in your shell history.
These are often stored away in your home directory, unless you do
something to keep it out of your history.  It should not be the
end of the world because it is troublesome to also obtain the
configuration file.  Still, it is not wise to tempt fate.

If you use BASH for your shell,
@example
HISTCONTROL=ignorespace:ignoredups
HISTIGNORE=gnu-pw-mgr *
unset HISTFILE
@end example
are your friends.  Press the space bar before the command name,
or specify that anything that looks like a ``gnu-pw-mgr'' command should
be ignored or eliminate history entirely.

Also, if you put your password id's on the command line, they become part
of the process history and can be found.  If that is a conceivable problem,
then you may prefer to not put it on the command line and then type
it in in response to a prompt.  Your password id will not be echoed
back as you type it.

@node best pratcices
@section Best gnu-pw-mgr practices

Try out several password id transforms before changing all your passwords
on all your sites.  You may decide it is too hard or too easy and want
to change it.  However, once you have gone to the trouble of changing the
passwords on a lot of sites, you won't be especially eager to do it again.
So, play with it on one site you use a lot, change the password a lot as
you change the transform and then make a good decision.

Once you need to or are required to change a password, simply specify
a new ``--rehash'' value for that password id. You may see its
current value by specifying ``--status''.

When choosing your password id transform, use things that you can easily
remember.  Especially if some nonsense thing can be easily remembered.
Separate the components with unusual things like multiple punctuation
characters.  Do odd things with the top level domain.  cApitaliZe strangely.
Use a slightly different transform for financial institutions.
If someone gets ahold of your seed file, you want to hope that a
dictionary attack will not be readily successful.

But lastly and most important: be sure you can remember your transform(s).
If you forget, your password is gone.  So choose what you can remember
and be consistent.

@node password resets
@section Password reset arrangements

Some sites will allow you to set up password resets using alternate channels
(i.e. not your primary email address).  Take advantage of this whenever
possible.  If someone gains access to your email, you don't want them to reset
all your passwords, intercept the restore access emails and, thus, gain access
to all your password protected accounts.

#! /bin/echo this-file-should-be-sourced,-not-executed.
## -*- Mode: shell-script -*-

## bootstrap -- bootstrapping script
##
##  This file is part of gnu-pw-mgr.
##  gnu-pw-mgr Copyright (c) 2013-2018 by Bruce Korb - all rights reserved
##
## gnu-pw-mgr is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by the
## Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## gnu-pw-mgr is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
## See the GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  If not, see <http://www.gnu.org/licenses/>.

set_source_dir() {
    test -d .git && {
        source_dir=$PWD
        git clean -f -x -d .
        return 0
    }

    test -f .sdir && {
        source_dir=$(cd $(<.sdir) && pwd)
        return 0
    }

    test -f ../gnu-pw-mgr/.git/config && {
        source_dir=$(cd ../gnu-pw-mgr && pwd)
        return 0
    }

    die "Cannot locate source directory"
}

initialize() {
    set -e
    unset CDPATH
    dashx=
    if shopt -qo xtrace
    then xtrace=true
    else xtrace=false
    fi

    if $xtrace
    then
        dashx=-x
        TRAPPED=false
        tcode='TRAPPED=true sfile=${BASH_SOURCE[0]} sline=${BASH_LINENO[0]}'
        trap "$tcode"' ; die "failed: ${_:-${FUNCNAME[0]}}"' 0
    fi
    readonly builddir=$PWD

    rm -rf m4 build-aux 2>/dev/null
    mkdir m4 build-aux
    chmod a+x tests/*.test
    GNULIB_SRCDIR=$(cd ${GNULIB_SRCDIR:-~gnu/proj/gnulib} >/dev/null \
        && pwd || exit 1 ) || \
        func_fatal_error 'cannot locate gnulib directory'
    cp -fp ${GNULIB_SRCDIR}/m4/gc-random.m4 m4/.
    {
        echo '[submodule "gnulib"]'
        printf '\tpath = %s\n\turl = git://git.sv.gnu.org/gnulib\n' \
            ${GNULIB_SRCDIR}
    } > .gitmodules
    set_source_dir
    init_srcdir
    cd ${progdir}
    month_stamp=$(date '+%B %Y')
    date_stamp=$(date +'%d %B %Y')
    title='gnu-pw-mgr - '$(sed -n "/^prog-title/{;s/';.*//;s/^[^']*'//;p;q;}" \
        src/opts.def)

    cyr=2013-$(date +%Y)

    sedcmd="s/@value{UPDATED}/${date_stamp}/"
    sedcmd+=$'\n'"/^Copyright @copyright/s/2013/$cyr/"
    sedcmd+=$'\n'"s/@value{UPDATED-MONTH}/${month_stamp}/"
    sedcmd+=$'\n'"s/@value{VERSION}/${ver}/"
    sedcmd+=$'\n'"s/@value{TITLE}/${title}/"
    sed "${sedcmd}" doc/titlepage.texi > doc/gnu-pw-mgr.texi
    rm -f doc/titlepage.texi

    gnulib_modules='
	    base64
	    close
	    crypto/gc-pbkdf2-sha1
	    crypto/gc-random
	    crypto/sha256
	    ctype
	    fdl
	    gendocs
	    inttypes
	    lgpl-2.1
	    malloc-posix
	    nanosleep
	    nonblocking
	    random
	    snippet/_Noreturn
	    snprintf
	    stdbool
	    stdio
	    stdnoreturn
	    strdup-posix
	    strstr
	    termios
	    time
	    timespec'

    set +e
}

init_srcdir() {
    cd ${source_dir}
    ( unset debug_cmd
      exec 2>/dev/null
      ${GNULIB_SRCDIR}/build-aux/gitlog-to-changelog
    ) > ${builddir}/ChangeLog
    local ver=$(
        PS4='+VG-$FUNCNAME-$LINENO> ' \
        bash $dashx ${GNULIB_SRCDIR}/build-aux/git-version-gen \
            ${builddir}/.tarball-version)
    printf %s ${ver} > ${progdir}/.tarball-version

    cd $progdir/src

    # "shared" is added to cant_flags 'cuz it is listed with "seed opts".
    #
    declare cant_flags=$(
        sed -n '1,/name *= *password-options/d
	    / name *= *formatting-options/q
	    /^ *name *=/{
		s/.*=//
		s/;.*//
		p
	    }' opts.def
        )

    #
    cant_flags=$(echo $cant_flags shared)
    local cant_ct=$(set -- ${cant_flags} ; echo $#)

    # The pbkdf2 option has two variations
    #
    local cmd_list=$(set +x
        sedcmd='s/pbkdf2/no-pbkdf2 use-pbkdf2/;s/  */, /g'
        sed "${sedcmd}" <<<"${cant_flags}")

    local agcmd=$'autogen definitions str2enum;\n'
    agcmd+=$'length;\n'
    agcmd+="cmd = ${cmd_list}"$';\n'
    autogen -MFdep-set-opt -b set-opt - <<<"$agcmd"

    autogen gpw-str.def
}

get_fwd_text() {
    rm -f sort-fwd.h
    {
        sedcmd=$'1s/Mode:.*/buffer-read-only: t -*- vi: set ro:/\n'
        sedcmd+='\@////DEFINES:@Q'

        sed "${sedcmd}" fwd-preamble.txt

        echo '////HEADER-FILES:'
        echo $'\n#include "config.h"\n'

        # These are the headers we know about.
        # GNULIB may have additional header dependencies.
        # We need to add in whatever they need.
        # so assemble the full list, strip blank lines and unique sort
        #
        {
            echo "$all_gnulib_includes" | grep -F '<'
            sed $'s/^[ \t]*//' <<- _EOF_
		#include <assert.h>
		#include <ctype.h>
		#include <errno.h>
		#include <fcntl.h>
		#include <inttypes.h>
		#include <pwd.h>
		#include <stdbool.h>
		#include <stdio.h>
		#include <stdlib.h>
		#include <stdnoreturn.h>
		#include <string.h>
		#include <termios.h>
		#include <time.h>
		#include <unistd.h>
		#include <sys/mman.h>
		#include <sys/stat.h>
		#include <sys/types.h>
		_EOF_
        } | sed $'/^[ \t]*$/d' | sort -u

        echo
        grep -F '"' <<<"$all_gnulib_includes" | \
            sort -u
        echo '#include "sort-opts.h"'

        echo
        sedcmd=$'\@////DEFINES:@,\@^////GLOBALS:@ {\n'
        sedcmd+=$'s@^////GLOBALS:.*@@\n'
        sedcmd+=$'p\n'
        sedcmd+=$'}'
        sed -n "${sedcmd}" fwd-preamble.txt
    } > sort-fwd.h
    sed 's/"sort-opts/"opts/' sort-fwd.h

    guard_sedcmd=$'/^#ifndef .*_GUARD/ {\n'
    guard_sedcmd+=$'s@ifndef@endif // @\n'
    guard_sedcmd+=$'p\nq\n}'
    guard_text=$(sed -n "$guard_sedcmd" fwd-preamble.txt)
    echo "$guard_text" >> sort-fwd.h
    
    # All headers are derived/generated
    printf '/*\n * Generated local headers:\n */\n'
    for f in $(ls -1 *.h | sed '/\(opts\|fwd\)\.h$/d')
    do
        printf '#include "%s"\n' $f
    done

    sedcmd='1,/PULL-HEADERS/d'
    sedcmd+=$'\n/^static /,/^{/ {\n'
    sedcmd+=$'s/{.*//\n'
    sedcmd+=$'s/) *$/);/\n'
    sedcmd+=$'p\n'
    sedcmd+=$'}\n'
    sedcmd+='/^# *if/p;/^# *el/p;/^# *endif/p'

    forward_list=$(grep -l '^////PULL-HEADERS:' *.c)
    for f in $forward_list
    do
        printf '\n/*\n * FILE: %s\n */\n' $f
        sed -n "${sedcmd}" $f
    done

    echo
    sedcmd=$'\@////GLOBALS:@,\@^////CODE-FILES:@ {\n'
    sedcmd+=$'s@^////CODE-FILES:.*@@\n'
    sedcmd+=$'p\n'
    sedcmd+=$'}'
    sed -n "${sedcmd}" fwd-preamble.txt

    # list the generated files first. They don't have extractable forwards.
    #
    echo $'#include "opts.c"\n#include "gpw-str.c"\n#include "set-opt.c"\n\n'

    for f in $forward_list
    do
        case "X$f" in
            Xgnu-pw-mgr.c ) : ;;
            * ) printf '#include "%s"\n' $f ;;
        esac
    done

    echo "$guard_text"
}

gen_opt_code() {
    $require_all_gnulib_includes
    cd $progdir/src

    autogen -MFdep-opts opts.def
    autogen -MFdep-sort-opts sort-opts.def
    get_fwd_text > fwd.h
}

patch_version() {
    local ver=$(< .tarball-version)
    test -d $archive_dir || mkdir -p $archive_dir
    case "$v" in
    UNKNOWN )
        v=0.1-dirty
        ;&

    *-dirty )
        test -f $archive_dir/pre-ct || \
            echo 0 > $archive_dir/pre-ct
        ct=$(( $(<$archive_dir/pre-ct) + 1))
        echo $ct > $archive_dir/pre-ct
        v=${v%dirty}dev${ct}
        printf "$ver" > .tarball-version
        ;;

    v* )
        echo 0 > $archive_dir/pre-ct
    esac

    grep -E "^New in $ver -" NEWS >/dev/null || {
        sed $'1i\\\n'"New in $ver - $(date +'%B %Y')" NEWS > XX
        mv -f XX NEWS
    }
}

install_libopts() {
    cd ${builddir}
    rm -rf libopts* 2>/dev/null
    tar -xzf $(autoopts-config libsrc)
    mv libopts-* libopts
    sed /AC_CONFIG_FILES/q libopts/m4/libopts.m4 > m4/libopts.m4
    local sedcmd='/^libopts_la_CPPFLAGS/s@$@ -I$(top_srcdir)/lib@'
    sedcmd+=$'\n$a\\\n\\\n'
    sedcmd+=$'all : ck-libopts.a\\\n'
    sedcmd+=$'ck-libopts.a : all-am\\\n'
    sedcmd+=$'\ttest -f libopts.a || '
    sedcmd+=$'ln -s `find . -name libopts.a` libopts.a\n'
    sed -i "$sedcmd" libopts/Makefile.am
}

after_gnulib_tool() {
    patch_version
    install_libopts
    gen_opt_code
    cd ${builddir}
}

untrap_die() {
    case "$(trap -p 0)" in
    *TRAPPED=true*' die '* )
        trap '' 0
        ;;
    esac
    ln build-aux/* .
}

# return success if the second file is as new or newer than first arg
#
vcheck() {
    # not in src dir --> copy
    # not in gnulib dir --> keep
    # if identical --> keep
    #
    test -f "$1" || return 1
    test -f "$2" || return 0
    cmp -s "$1" "$2" && return 0

    local v1=$(sed -n '/^scriptversion/{;s@;.*@@p;q;}' "$1")
    local v2=$(sed -n '/^scriptversion/{;s@;.*@@p;q;}' "$2")
    local first=$(printf '%s\n' "$v2" "$v1" | sort | head -1)

    # If the gnulib version sorts first, keep otherwise copy
    #
    test "X$first" = "X$v2"
    return $?
}

sv_PS4="$PS4"
PS4='+BSS-$FUNCNAME-$LINENO> '
. ./"$0.std"

PS4='+BSC-$FUNCNAME-$LINENO> '
initialize
debug_cmd=

func_add_hook func_gnulib_tool  after_gnulib_tool
func_add_hook func_fini         untrap_die
PS4="$sv_PS4"

# Local Variables:
# mode:shell-script
# sh-indentation:4
# sh-basic-offset:4
# indent-tabs-mode: nil
# End:

# bootstrap.conf ends here
